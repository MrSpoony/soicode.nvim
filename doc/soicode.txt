==============================================================================
------------------------------------------------------------------------------
                                                             *Soicode.compile()*
                              `Soicode.compile`()
Compile the c++ file you are currently in, or the corresponding file from the stoml file you currently have open.

Usage ~
`require("soicode").compile()`

------------------------------------------------------------------------------
                                                         *Soicode.get_samples()*
                            `Soicode.get_samples`()
Get the samples from the current file, or the corresponding stoml file.

Return ~
`(Sample[]|nil)` samples The samples from the current file or nil in case of an error.

Usage ~
`require("soicode").get_samples()`

------------------------------------------------------------------------------
                                                          *Soicode.run_sample()*
                         `Soicode.run_sample`({sample})
the sample. Make sure the c++ file got compiled before running a sample.
Parameters ~
{sample} Sample The sample to run.
Return ~
Verdict verdict The verdict of the sample.

Usage ~
`require("soicode").run_sample({name="sample.01", input="1 2", output="3"})`

------------------------------------------------------------------------------
                                                     *Soicode.run_all_samples()*
                   `Soicode.run_all_samples`({skip_compile})
all samples from the corresponding .stoml, .toml or .soitask file.
compiles the file before running the samples.
Parameters ~
{skip_compile} `(boolean|nil)` Whether to skip the compilation step, optional.
Return ~
Verdict[] verdicts The verdicts of the samples.

Usage ~
`require("soicode").run_all_samples()`

------------------------------------------------------------------------------
                                                          *Soicode.report_all()*
                             `Soicode.report_all`()
all samples to the floating window.
Usage ~
`require("soicode").report_all()`

------------------------------------------------------------------------------
                                                          *Soicode.report_one()*
                         `Soicode.report_one`({sample})
one sample to the floating window.
Parameters ~
{sample} Sample The sampne to report

Usage ~
`require("soicode").report_one({name="sample.01", input="1 2", output="3"})`

------------------------------------------------------------------------------
                                                              *Soicode.report()*
                          `Soicode.report`({verdicts})
the verdicts to the buffer.
Parameters ~
{verdicts} Verdict[] The verdicts to write to the buffer.

Usage ~
`require("soicode").write_verdicts_to_buf({
   {
       verdict="OK",
       sample={
           name="sample.01",
           input="1 2",
           output="3"
       },
       output={
           {data="3", stdout=true},
           {data="", stdout=true}
       },
       exitcode=0
   }

------------------------------------------------------------------------------
                                              *Soicode.toggle_floating_window()*
                       `Soicode.toggle_floating_window`()
the floating window.
Usage ~
`require("soicode").toggle_floating_window()`

------------------------------------------------------------------------------
                                                *Soicode.open_floating_window()*
                        `Soicode.open_floating_window`()
the floating window.
Usage ~
`require("soicode").open_floating_window()`

------------------------------------------------------------------------------
                                               *Soicode.close_floating_window()*
                       `Soicode.close_floating_window`()
the floating window.
Usage ~
`require("soicode").close_floating_window()`

------------------------------------------------------------------------------
                                                  *Soicode.run_with_own_input()*
                         `Soicode.run_with_own_input`()
the current file with your own input.
Usage ~
`require("soicode").run_with_own_input()`


==============================================================================
------------------------------------------------------------------------------
                                                               *Soicode.options*
                               `Soicode.options`
Your plugin configuration with its default values.

Default values:
>lua
  Soicode.options = {
      -- Prints useful logs about what event are triggered, and reasons actions are executed.
      debug = false,
      -- Compiler to use
      compiler = "g++",
      -- Additional flags,
      flags = {
          "-Wall",
          "-Wextra",
          "-std=c++20",
          "-g3",
          "-ggdb3",
          "-fsanitize=address,undefined",
          "-D_GLIBCXX_DEBUG",
      },
      -- Use the soi header
      soi_header = true,
      -- Where to store additon files such as the soi header
      additional_files_dir = vim.fn.expand("$HOME/.local/share/nvim/soicode"),
      -- Timeout for TLE in milliseconds, 0, nil, false or -1 to disable (1 day will be set as hardmax)
      timeout_ms = 1000,
      -- Timeout for code compilation in milliseconds, 0, nil, false or -1 to disable (1 day will be set as hardmax)
      compilation_timeout_ms = 10000,
      -- Run in background, and don't block the UI
      run_in_background = true,
  }

  Soicode.ns = vim.api.nvim_create_namespace("soicode")

<
------------------------------------------------------------------------------
                                                               *Soicode.setup()*
                           `Soicode.setup`({options})
Define your soicode setup.

Parameters ~
{options} `(table)` Module config table. See |Soicode.options|.

Usage ~
`require("soicode").setup()` (add `{}` with your |Soicode.options| table)


==============================================================================
------------------------------------------------------------------------------
Class ~
{Sample}
Fields ~
{name} `(string)` The name of the sample.
{input} `(string)` The input given to the sample.
{output} `(string)` The expected output.

------------------------------------------------------------------------------
Class ~
{OutputLine} This describes a line of output
Fields ~
{data} `(string)` The actual line printed
{stdout} `(boolean)` Whether the line was printed to stdout or stderr.

------------------------------------------------------------------------------
Class ~
{Verdict}
Fields ~
{verdict} "OK"|"WA"|"TLE"|"RE" The verdict of the sample.
{sample} Sample The sample the Verdict corresponds to.
{output} OutputLine[] The output lines of the execution.
{exitcode} `(number|nil)` The exit code of the execution, is nil when verdict is "TLE".

------------------------------------------------------------------------------
                                                                        *trim()*
                                  `trim`({s})
Parameters ~
{s} `(string)` The string to trim.
Return ~
`(string)` s The trimmed string.

------------------------------------------------------------------------------
                                                                   *trim_back()*
                           `trim_back`({s}, {delim})
Parameters ~
{s} `(string)` The string to trim.
{delim} `(string)` The delimiter to trim with at the back.
Return ~
`(string)` s The trimmed string.


 vim:tw=78:ts=8:noet:ft=help:norl: