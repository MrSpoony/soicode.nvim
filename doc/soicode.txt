==============================================================================
------------------------------------------------------------------------------
                                                             *Soicode.compile()*
                              `Soicode.compile`()
Compile the c++ file you are currently in, or the corresponding file from the stoml file you currently have open.

Usage ~
`require("soicode").compile()`

------------------------------------------------------------------------------
                                                         *Soicode.get_samples()*
                            `Soicode.get_samples`()
Get the samples from the current file, or the corresponding stoml file.

Return ~
`(Sample[]|nil)` samples The samples from the current file or nil in case of an error.

Usage ~
`require("soicode").get_samples()`

------------------------------------------------------------------------------
                                                          *Soicode.run_sample()*
                         `Soicode.run_sample`({sample})
the sample. Make sure the c++ file got compiled before running a sample.
Parameters ~
{sample} Sample The sample to run.
Return ~
Verdict verdict The verdict of the sample.

Usage ~
`require("soicode").run_sample({name="sample.01", inupt="1 2", output="3"})`


==============================================================================
------------------------------------------------------------------------------
                                                               *Soicode.options*
                               `Soicode.options`
Your plugin configuration with its default values.

Default values:
>
  Soicode.options = {
      -- Prints useful logs about what event are triggered, and reasons actions are executed.
      debug = false,
      -- Compiler to use
      compiler = "g++",
      -- Additional flags
      flags = "-Wall -Wextra -fdiagnostics-color=never -std=c++20 -O2",
      -- Use the soi header
      soi_header = true,
      -- Timeout for TLE in milliseconds, 0, nil, false or -1 to disable
      timeout_ms = 1000,
  }

<

------------------------------------------------------------------------------
                                                               *Soicode.setup()*
                           `Soicode.setup`({options})
Define your soicode setup.

Parameters ~
{options} `(table)` Module config table. See |Soicode.options|.

Usage ~
`require("soicode").setup()` (add `{}` with your |Soicode.options| table)


==============================================================================
------------------------------------------------------------------------------
Class ~
{Sample}
Fields ~
{name} `(string)` The name of the sample.
{input} `(string)` The input given to the sample.
{output} `(string)` The expected output.

------------------------------------------------------------------------------
Class ~
{OutputLine} This describes a line of output
Fields ~
{data} `(string)` The actual line printed
{stdout} `(boolean)` Whether the line was printed to stdout or stderr.

------------------------------------------------------------------------------
Class ~
{Verdict}
Fields ~
{verdict} "OK"|"WA"|"TLE"|"RE" The verdict of the sample.
{sample} Sample The sample the Verdict corresponds to.
{output} OutputLine[] The output lines of the execution.
{exitcode} `(number)` The exit code of the execution.


 vim:tw=78:ts=8:noet:ft=help:norl: